import bpy
import random
import time
import copy

# Basic timing setup
frame_start_time = time.time()

# Define movement boundaries
BOUNDARY_MIN_X = -10
BOUNDARY_MAX_X = 20
BOUNDARY_MIN_Y = -15
BOUNDARY_MAX_Y = 15
BOUNDARY_MIN_Z = 0
BOUNDARY_MAX_Z = 10

# Define Consumer properties
consumer_data = {
    'hunger': 100,
    'age': 0,
    'last_hunger_time': frame_start_time,
    'speed': 0.1,  # Movement speed in Blender units per frame
    'direction': (random.choice([-1, 1]), random.choice([-1, 1]), random.choice([-1, 1])),  # Random 3D direction
    'last_direction_change_time': frame_start_time,
    'sensing_distance': 5.0  # Distance within which the consumer can sense the producer
}

# List to keep track of all producers
producers = []
producers.append(bpy.data.objects.get("Producer"))

# Producer provides hunger points when consumed
PRODUCER_HUNGER_POINTS = 10

# Timer for spawning new producers
last_spawn_time = frame_start_time
SPAWN_INTERVAL = 3  # seconds

# List to keep track of all consumers
consumers = []

def spawn_new_consumer():
    # Find the original consumer to duplicate
    original_consumer = bpy.data.objects.get("Consumer")

    if original_consumer:
        for _ in range(2):  # Spawn two consumers
            new_consumer = original_consumer.copy()
            new_consumer.data = original_consumer.data.copy()  # Ensure mesh data is copied
            bpy.context.collection.objects.link(new_consumer)  # Add it to the scene

            # Give a unique name to the new consumer
            new_consumer.name = f"Consumer_{len(consumers) + 1}"

            # Set a random location for the new consumer within bounds
            new_consumer.location = (
                random.uniform(BOUNDARY_MIN_X, BOUNDARY_MAX_X),
                random.uniform(BOUNDARY_MIN_Y, BOUNDARY_MAX_Y),
                random.uniform(BOUNDARY_MIN_Z, BOUNDARY_MAX_Z)
            )

            # Create a unique data copy for each consumer
            new_consumer_data = copy.deepcopy(consumer_data)  # Deep copy to avoid shared references
            consumers.append((new_consumer, new_consumer_data))  # Append the new consumer and its data

            print(f"New Consumer duplicated at location: {new_consumer.location}")

# Ensure the initial consumer has its own data
initial_consumer = bpy.data.objects.get("Consumer")
if initial_consumer:
    # Add the initial consumer to the list along with its own data
    initial_consumer_data = copy.deepcopy(consumer_data)  # Ensure it has unique data
    consumers.append((initial_consumer, initial_consumer_data))  # Append as a tuple (consumer, data)
    print(f"Initial consumer added to the list with location: {initial_consumer.location}")
else:
    print("No initial consumer found!")

# Call the function to spawn consumers initially
spawn_new_consumer()


def move_consumer_randomly(consumer, consumer_data):
    current_time = time.time()

    # Change direction every 4 seconds
    if current_time - consumer_data['last_direction_change_time'] > 4:
        consumer_data['direction'] = (
            random.choice([-1, 1]),
            random.choice([-1, 1]),
            random.choice([-1, 1])  # Random movement in Z direction
        )
        consumer_data['last_direction_change_time'] = current_time

    # Update consumer position based on the direction
    direction_vector = consumer_data['direction']
    consumer.location.x += direction_vector[0] * consumer_data['speed']
    consumer.location.y += direction_vector[1] * consumer_data['speed']
    consumer.location.z += direction_vector[2] * consumer_data['speed']

    # Periodic boundary conditions
    consumer.location.x = BOUNDARY_MIN_X if consumer.location.x > BOUNDARY_MAX_X else BOUNDARY_MAX_X if consumer.location.x < BOUNDARY_MIN_X else consumer.location.x
    consumer.location.y = BOUNDARY_MIN_Y if consumer.location.y > BOUNDARY_MAX_Y else BOUNDARY_MAX_Y if consumer.location.y < BOUNDARY_MIN_Y else consumer.location.y
    consumer.location.z = BOUNDARY_MIN_Z if consumer.location.z > BOUNDARY_MAX_Z else BOUNDARY_MAX_Z if consumer.location.z < BOUNDARY_MIN_Z else consumer.location.z

        
        
def check_interaction(consumer, consumer_data):
    # Iterate through all producers to check interactions
    for producer in producers:
        if producer:  # Ensure the producer object still exists
            distance = (consumer.location - producer.location).length
            if distance < 0.5:  # If consumer is close enough to "consume" the producer
                print(f"{consumer.name} consumed {producer.name}!")
                bpy.data.objects.remove(producer, do_unlink=True)  # Remove producer from scene
                consumer_data['hunger'] += PRODUCER_HUNGER_POINTS  # Increase consumer's hunger
                producers.remove(producer)  # Remove producer from the list
                spawn_new_producer()  # Spawn a new producer to replace the consumed one
                break  # Stop checking after consuming one producer

def spawn_new_producer():
    # Find the original producer to duplicate
    original_producer = bpy.data.objects.get("Producer")

    if original_producer:
        # Duplicate the producer
        new_producer = original_producer.copy()
        new_producer.data = original_producer.data.copy()  # Ensure mesh data is copied
        bpy.context.collection.objects.link(new_producer)  # Add it to the scene

        # Give a unique name to the new producer
        new_producer.name = f"Producer_{len(producers) + 1}"

        # Get dimensions to calculate bounds
        producer_dimensions = new_producer.dimensions
        half_size_x = producer_dimensions.x / 2
        half_size_y = producer_dimensions.y / 2
        half_size_z = producer_dimensions.z / 2

        # Define boundaries considering the size of the producer
        x = random.uniform(BOUNDARY_MIN_X + half_size_x, BOUNDARY_MAX_X - half_size_x)
        y = random.uniform(BOUNDARY_MIN_Y + half_size_y, BOUNDARY_MAX_Y - half_size_y)
        z = random.uniform(BOUNDARY_MIN_Z + half_size_z, BOUNDARY_MAX_Z - half_size_z)

        # Set location of the new producer
        new_producer.location = (x, y, z)

        # Append the new producer to the list
        producers.append(new_producer)

        # Print location for debugging
        print(f"New Producer duplicated at location: ({x}, {y}, {z}), dimensions: {producer_dimensions}")
    else:
        print("No original 'Producer' object found to duplicate!")

def initialize_producers():
    # Spawn two initial producers at the start of the simulation
    for _ in range(2):
        spawn_new_producer()  # Call the function to create the producer

def update_consumer_data(consumer, consumer_data):
    current_time = time.time()

    # Decrease hunger every second
    if current_time - consumer_data['last_hunger_time'] > 1:
        consumer_data['hunger'] -= 1
        consumer_data['last_hunger_time'] = current_time

    # Check if consumer's hunger reaches 0 or age surpasses 5 minutes (300 seconds)
    consumer_data['age'] += 1 / 60  # Assuming this is running every frame
    if consumer_data['hunger'] <= 0 or consumer_data['age'] > 300:
        print(f"{consumer.name} died of hunger or old age!")
        bpy.data.objects.remove(consumer, do_unlink=True)  # Remove consumer from the scene

# Move producer towards consumer (to be used within sensing distance)
def move_consumer_towards_producer(consumer, producer):
    direction_to_producer = producer.location - consumer.location
    distance = direction_to_producer.length  # Calculate the current distance

    if distance > 0.001:  # Avoid division by zero
        direction_to_producer.normalize()  # Normalize the direction to get unit vector
        consumer.location += direction_to_producer * min(consumer_data['speed'], distance)  # Move towards the producer, but don't overshoot

# Simulation loop
def run_simulation(scene):
    # Ensure a minimum number of producers
    if len(producers) < 2:
        for _ in range(2 - len(producers)):
            spawn_new_producer()

    for consumer, consumer_data in consumers:  # Iterate through all consumers
        if consumer:
            closest_producer = None
            closest_distance = float('inf')  # Start with a large distance
            
            # Check all producers in the scene
            for producer in producers:
                if producer:  # Ensure the producer object still exists
                    distance_to_producer = (consumer.location - producer.location).length
                    
                    # Sensing logic: Find the closest producer within sensing distance
                    if distance_to_producer < closest_distance:
                        closest_distance = distance_to_producer
                        closest_producer = producer

            # If a producer is within sensing distance
            if closest_producer and closest_distance <= consumer_data['sensing_distance']:
                move_consumer_towards_producer(consumer, closest_producer)  # Move towards the closest producer
            else:
                move_consumer_randomly(consumer, consumer_data)  # Move randomly if no producer is close enough

            # Update hunger and reproduction
            update_consumer_data(consumer, consumer_data)  # Pass both consumer and its data
            check_interaction(consumer, consumer_data)  # Check interaction with any producer
        else:
            print("Consumer object not found!")


# Clear previous handlers to prevent duplicate calls
bpy.app.handlers.frame_change_pre.clear()

# Add the run_simulation function to frame change handlers
bpy.app.handlers.frame_change_pre.append(run_simulation)

# (Optional) Initialize your simulation parameters here if needed
initialize_producers()

# Start rendering
bpy.ops.render.opengl(animation=True)

## Initialize producers at the start of the simulation
#initialize_producers()

## Run the simulation in Blender's scene update handler
#bpy.app.handlers.frame_change_pre.clear()  # Clear previous handlers if any
#bpy.app.handlers.frame_change_pre.append(run_simulation)  # Append simulation handler
